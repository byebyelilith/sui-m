// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

import { fromB64 } from '@mysten/bcs';
import { describe, expect, it, test } from 'vitest';

import {
	parseSerializedZkLoginSignature,
	ZkLoginPublicIdentifier,
} from '../../../src/zklogin/publickey';
import { getZkLoginSignature, parseZkLoginSignature } from '../../../src/zklogin/signature';
import { SuiGraphQLClient } from '../../../src/graphql';

const aSignature =
	'BQNNMTE3MDE4NjY4MTI3MDQ1MTcyMTM5MTQ2MTI3OTg2NzQ3NDg2NTc3NTU1NjY1ODY1OTc0MzQ4MTA5NDEyNDA0ODMzNDY3NjkzNjkyNjdNMTQxMjA0Mzg5OTgwNjM2OTIyOTczODYyNDk3NTQyMzA5NzI3MTUxNTM4NzY1Mzc1MzAxNjg4ODM5ODE1MTM1ODQ1ODYxNzIxOTU4NDEBMQMCTDE4Njc0NTQ1MDE2MDI1ODM4NDg4NTI3ODc3ODI3NjE5OTY1NjAxNzAxMTgyNDkyOTk1MDcwMTQ5OTkyMzA4ODY4NTI1NTY5OTgyNzNNMTQ0NjY0MTk2OTg2NzkxMTYzMTM0NzUyMTA2NTQ1NjI5NDkxMjgzNDk1OTcxMDE3NjkyNTY5NTkwMTAwMDMxODg4ODYwOTEwODAzMTACTTExMDcyOTU0NTYyOTI0NTg4NDk2MTQ4NjMyNDc0MDc4NDMyNDA2NjMzMjg4OTQ4MjU2NzE4ODA5NzE0ODYxOTg2MTE5MzAzNTI5NzYwTTE5NzkwNTE2MDEwNzg0OTM1MTAwMTUwNjE0OTg5MDk3OTA4MjMzODk5NzE4NjQ1NTM2MTMwNzI3NzczNzEzNDA3NjExMTYxMzY4MDQ2AgExATADTTEwNDIzMjg5MDUxODUzMDMzOTE1MzgwODEwNTE2MTMwMjA1NzQ3MTgyODY3NTk2NDU3MTM5OTk5MTc2NzE0NDc2NDE1MTQ4Mzc2MzUwTTIxNzg1NzE5Njk1ODQ4MDEzOTA4MDYxNDkyOTg5NzY1Nzc3Nzg4MTQyMjU1ODk3OTg2MzAwMjQxNTYxMjgwMTk2NzQ1MTc0OTM0NDU3ATExeUpwYzNNaU9pSm9kSFJ3Y3pvdkwyRmpZMjkxYm5SekxtZHZiMmRzWlM1amIyMGlMQwFmZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNkltSTVZV00yTURGa01UTXhabVEwWm1aa05UVTJabVl3TXpKaFlXSXhPRGc0T0RCalpHVXpZamtpTENKMGVYQWlPaUpLVjFRaWZRTTEzMzIyODk3OTMwMTYzMjE4NTMyMjY2NDMwNDA5NTEwMzk0MzE2OTg1Mjc0NzY5MTI1NjY3MjkwNjAwMzIxNTY0MjU5NDY2NTExNzExrgAAAAAAAABhAEp+O5GEAF/5tKNDdWBObNf/1uIrbOJmE+xpnlBD2Vikqhbd0zLrQ2NJyquYXp4KrvWUOl7Hso+OK0eiV97ffwucM8VdtG2hjf/RUGNO5JNUH+D/gHtE9sHe6ZEnxwZL7g==';
const aSignatureInputs = {
	addressSeed: '13322897930163218532266430409510394316985274769125667290600321564259466511711',
	headerBase64:
		'eyJhbGciOiJSUzI1NiIsImtpZCI6ImI5YWM2MDFkMTMxZmQ0ZmZkNTU2ZmYwMzJhYWIxODg4ODBjZGUzYjkiLCJ0eXAiOiJKV1QifQ',
	issBase64Details: {
		indexMod4: 1,
		value: 'yJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLC',
	},
	proofPoints: {
		a: [
			'11701866812704517213914612798674748657755566586597434810941240483346769369267',
			'14120438998063692297386249754230972715153876537530168883981513584586172195841',
			'1',
		],
		b: [
			[
				'1867454501602583848852787782761996560170118249299507014999230886852556998273',
				'14466419698679116313475210654562949128349597101769256959010003188886091080310',
			],
			[
				'11072954562924588496148632474078432406633288948256718809714861986119303529760',
				'19790516010784935100150614989097908233899718645536130727773713407611161368046',
			],
			['1', '0'],
		],
		c: [
			'10423289051853033915380810516130205747182867596457139999176714476415148376350',
			'21785719695848013908061492989765777788142255897986300241561280196745174934457',
			'1',
		],
	},
};
const anEphemeralSignature =
	'AEp+O5GEAF/5tKNDdWBObNf/1uIrbOJmE+xpnlBD2Vikqhbd0zLrQ2NJyquYXp4KrvWUOl7Hso+OK0eiV97ffwucM8VdtG2hjf/RUGNO5JNUH+D/gHtE9sHe6ZEnxwZL7g==';

describe('zkLogin signature', () => {
	test('is parsed successfully', () => {
		expect(parseZkLoginSignature(fromB64(aSignature).slice(1))).toMatchObject({
			inputs: aSignatureInputs,
			maxEpoch: '174',
			userSignature: fromB64(anEphemeralSignature),
		});
	});
	test('is serialized successfully', () => {
		expect(
			getZkLoginSignature({
				inputs: aSignatureInputs,
				maxEpoch: '174',
				userSignature: fromB64(anEphemeralSignature),
			}),
		).toBe(aSignature);
	});
	it('verify a personal message runs', async () => {
		// test case generated from `sui keytool zk-login-insecure-sign-personal-message --data "hello" --max-epoch 1000000`
		let bytes = 'BWhlbGxv';
		let testSignature =
			'BQNNMTczMTgwODkxMjU5NTI0MjE3MzYzNDIyNjM3MTc5MzI3MTk0Mzc3MTc4NDQyODI0MTAxODc5NTc5ODQ3NTE5Mzk5NDI4OTgyNTEyNTBNMTEzNzM5NjY2NDU0NjkxMjI1ODIwNzQwODIyOTU5ODUzODgyNTg4NDA2ODE2MTgyNjg1OTM5NzY2OTczMjU4OTIyODA5MTU2ODEyMDcBMQMCTDU5Mzk4NzExNDczNDg4MzQ5OTczNjE3MjAxMjIyMzg5ODAxNzcxNTIzMDMyNzQzMTEwNDcyNDk5MDU5NDIzODQ5MTU3Njg2OTA4OTVMNDUzMzU2ODI3MTEzNDc4NTI3ODczMTIzNDU3MDM2MTQ4MjY1MTk5Njc0MDc5MTg4ODI4NTg2NDk2Njg4NDAzMjcxNzA0OTgxMTcwOAJNMTA1NjQzODcyODUwNzE1NTU0Njk3NTM5OTA2NjE0MTA4NDAxMTg2MzU5MjU0NjY1OTcwMzcwMTgwNTg3NzAwNDEzNDc1MTg0NjEzNjhNMTI1OTczMjM1NDcyNzc1NzkxNDQ2OTg0OTYzNzIyNDI2MTUzNjgwODU4MDEzMTMzNDMxNTU3MzU1MTEzMzAwMDM4ODQ3Njc5NTc4NTQCATEBMANNMTU3OTE1ODk0NzI1NTY4MjYyNjMyMzE2NDQ3Mjg4NzMzMzc2MjkwMTUyNjk5ODQ2OTk0MDQwNzM2MjM2MDMzNTI1Mzc2Nzg4MTMxNzFMNDU0Nzg2NjQ5OTI0ODg4MTQ0OTY3NjE2MTE1ODAyNDc0ODA2MDQ4NTM3MzI1MDAyOTQyMzkwNDExMzAxNzQyMjUzOTAzNzE2MjUyNwExMXdpYVhOeklqb2lhSFIwY0hNNkx5OXBaQzUwZDJsMFkyZ3VkSFl2YjJGMWRHZ3lJaXcCMmV5SmhiR2NpT2lKU1V6STFOaUlzSW5SNWNDSTZJa3BYVkNJc0ltdHBaQ0k2SWpFaWZRTTIwNzk0Nzg4NTU5NjIwNjY5NTk2MjA2NDU3MDIyOTY2MTc2OTg2Njg4NzI3ODc2MTI4MjIzNjI4MTEzOTE2MzgwOTI3NTAyNzM3OTExCgAAAAAAAABhAPl6x1AzJDGj7MEyBbKiIMd8l+o+yL1NU/9cs8OJIysI4Cy9GbT0GY3NnY1+0PaRaAXTm5EmeiWeHqYjn9OauAa5xu4WMO8+cRFEpkjbBruyKE9ydM++5T/87lA8waSSAA==';
		let parsed = parseSerializedZkLoginSignature(testSignature);
		let pk = new ZkLoginPublicIdentifier(parsed.publicKey, { client: new SuiGraphQLClient({
			url: 'https://sui-devnet.mystenlabs.com/graphql',
		})});

		// returns error bc the test signature is for max epoch 10, should not verify.
		let res = await pk.verifyPersonalMessage(fromB64(bytes), parsed.signature);
		expect(res).toBe(false);

		// returns ok bc the second signature sets max epoch to 1000000, verifies ok.
		let testSignature2 = "BQNNMTc3MTE3NDA3NDQ2OTgwMDgwNTQ1MDk2NjEyMzM3MDE4ODc1NzQ0NzU1NTA4NTEwNjI1OTgxNTQ1NDY2MTUzNzcwNzc3MTE4MTU2NzBNMTYxODExNTI5MjU4MTU0NTU3MzM2MjEyMTAxNzcxOTAzNjQ5ODE2Njk4ODg1NjQxNDI1Nzk2MDg1NTM4ODU4MTU2MDYyOTA5MTM0MTYBMQMCSzU4OTU1MjQ0NzYyMDA0NzA4MTc1OTYxMjQ5MzYxNTE5MjYzNTEyNDQ0OTI5NTE3NTI3OTUzMDYwOTE0ODAwMTQ4NDg1MjU4NTQyMEwzOTg1NTQxNDg5NDc2NzMwNTMwMjIzNjg3MjQ2NjI0MjA5OTM0NDg0MjAwMjU2ODY4NTI3MDY5ODk4MTc1MjMzMzI1NTE0MjU1NDI2Ak0xMTcwMjU5OTcyNDIxOTA3Mzg3NDIwMjAzMDExMTA5Mzk4NTMwMjk3NDcyMDUyODk1NjE0ODQyMDY4NjY5MjEyNjAzNDg4NzkzMzY0Nk0yMDU0MjczOTIwOTUxMzM2ODAyNTc1MTMzNTA4MDM5NTAyOTAyMjY0OTA2MjcwOTg0MzEwODU0MTc1MzE4NTc4NDMwNzgxOTg5MjAyOQIBMQEwA0wxNjIzNDQyMzE4ODQ5MDQ0MjkwODUzOTA3NTA5OTIwMTM5OTUzMTEyNjI2Mjk3NDM0NzQyMzE4NzIzMDY1MTIxNjM0Nzk2MTU5Mjk3TTE0Mzg0OTY0NDMzMjM3OTczOTY2ODAzNzQyMDU4MDE3NDg4MzM1MzYxMzMyMjAwNDAzNDQzMzgzNTM2NzMzMzAwNTUyMDgyODE4MDUxATEod2lhWE56SWpvaWFIUjBjSE02THk5dllYVjBhQzV6ZFdrdWFXOGlMQwI+ZXlKcmFXUWlPaUp6ZFdrdGEyVjVMV2xrSWl3aWRIbHdJam9pU2xkVUlpd2lZV3huSWpvaVVsTXlOVFlpZlFNMjA0MzUzNjY2MDAwMzYzNzU3NDU5MjU5NjM0NTY4NjEzMDc5MjUyMDk0NzAyMTkzMzQwMTg1NjQxNTgxNDg1NDQwMzYxOTYyODQ2NDJAQg8AAAAAAGEA+XrHUDMkMaPswTIFsqIgx3yX6j7IvU1T/1yzw4kjKwjgLL0ZtPQZjc2djX7Q9pFoBdObkSZ6JZ4epiOf05q4BrnG7hYw7z5xEUSmSNsGu7IoT3J0z77lP/zuUDzBpJIA";
		let parsed2 = parseSerializedZkLoginSignature(testSignature2);
		let res1 = await pk.verifyPersonalMessage(fromB64(bytes), parsed2.signature);
		expect(res1).toBe(true);
	});
});
