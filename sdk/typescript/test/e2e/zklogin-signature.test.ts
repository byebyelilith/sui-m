// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

import { fromB64 } from '@mysten/bcs';
import { describe, expect, it, test } from 'vitest';

import { SuiGraphQLClient } from '../../src/graphql';
import {
	parseSerializedZkLoginSignature,
	ZkLoginPublicIdentifier,
} from '../../src/zklogin/publickey';
import { getZkLoginSignature, parseZkLoginSignature } from '../../src/zklogin/signature';

const aSignature =
	'BQNNMTE3MDE4NjY4MTI3MDQ1MTcyMTM5MTQ2MTI3OTg2NzQ3NDg2NTc3NTU1NjY1ODY1OTc0MzQ4MTA5NDEyNDA0ODMzNDY3NjkzNjkyNjdNMTQxMjA0Mzg5OTgwNjM2OTIyOTczODYyNDk3NTQyMzA5NzI3MTUxNTM4NzY1Mzc1MzAxNjg4ODM5ODE1MTM1ODQ1ODYxNzIxOTU4NDEBMQMCTDE4Njc0NTQ1MDE2MDI1ODM4NDg4NTI3ODc3ODI3NjE5OTY1NjAxNzAxMTgyNDkyOTk1MDcwMTQ5OTkyMzA4ODY4NTI1NTY5OTgyNzNNMTQ0NjY0MTk2OTg2NzkxMTYzMTM0NzUyMTA2NTQ1NjI5NDkxMjgzNDk1OTcxMDE3NjkyNTY5NTkwMTAwMDMxODg4ODYwOTEwODAzMTACTTExMDcyOTU0NTYyOTI0NTg4NDk2MTQ4NjMyNDc0MDc4NDMyNDA2NjMzMjg4OTQ4MjU2NzE4ODA5NzE0ODYxOTg2MTE5MzAzNTI5NzYwTTE5NzkwNTE2MDEwNzg0OTM1MTAwMTUwNjE0OTg5MDk3OTA4MjMzODk5NzE4NjQ1NTM2MTMwNzI3NzczNzEzNDA3NjExMTYxMzY4MDQ2AgExATADTTEwNDIzMjg5MDUxODUzMDMzOTE1MzgwODEwNTE2MTMwMjA1NzQ3MTgyODY3NTk2NDU3MTM5OTk5MTc2NzE0NDc2NDE1MTQ4Mzc2MzUwTTIxNzg1NzE5Njk1ODQ4MDEzOTA4MDYxNDkyOTg5NzY1Nzc3Nzg4MTQyMjU1ODk3OTg2MzAwMjQxNTYxMjgwMTk2NzQ1MTc0OTM0NDU3ATExeUpwYzNNaU9pSm9kSFJ3Y3pvdkwyRmpZMjkxYm5SekxtZHZiMmRzWlM1amIyMGlMQwFmZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNkltSTVZV00yTURGa01UTXhabVEwWm1aa05UVTJabVl3TXpKaFlXSXhPRGc0T0RCalpHVXpZamtpTENKMGVYQWlPaUpLVjFRaWZRTTEzMzIyODk3OTMwMTYzMjE4NTMyMjY2NDMwNDA5NTEwMzk0MzE2OTg1Mjc0NzY5MTI1NjY3MjkwNjAwMzIxNTY0MjU5NDY2NTExNzExrgAAAAAAAABhAEp+O5GEAF/5tKNDdWBObNf/1uIrbOJmE+xpnlBD2Vikqhbd0zLrQ2NJyquYXp4KrvWUOl7Hso+OK0eiV97ffwucM8VdtG2hjf/RUGNO5JNUH+D/gHtE9sHe6ZEnxwZL7g==';
const aSignatureInputs = {
	addressSeed: '13322897930163218532266430409510394316985274769125667290600321564259466511711',
	headerBase64:
		'eyJhbGciOiJSUzI1NiIsImtpZCI6ImI5YWM2MDFkMTMxZmQ0ZmZkNTU2ZmYwMzJhYWIxODg4ODBjZGUzYjkiLCJ0eXAiOiJKV1QifQ',
	issBase64Details: {
		indexMod4: 1,
		value: 'yJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLC',
	},
	proofPoints: {
		a: [
			'11701866812704517213914612798674748657755566586597434810941240483346769369267',
			'14120438998063692297386249754230972715153876537530168883981513584586172195841',
			'1',
		],
		b: [
			[
				'1867454501602583848852787782761996560170118249299507014999230886852556998273',
				'14466419698679116313475210654562949128349597101769256959010003188886091080310',
			],
			[
				'11072954562924588496148632474078432406633288948256718809714861986119303529760',
				'19790516010784935100150614989097908233899718645536130727773713407611161368046',
			],
			['1', '0'],
		],
		c: [
			'10423289051853033915380810516130205747182867596457139999176714476415148376350',
			'21785719695848013908061492989765777788142255897986300241561280196745174934457',
			'1',
		],
	},
};
const anEphemeralSignature =
	'AEp+O5GEAF/5tKNDdWBObNf/1uIrbOJmE+xpnlBD2Vikqhbd0zLrQ2NJyquYXp4KrvWUOl7Hso+OK0eiV97ffwucM8VdtG2hjf/RUGNO5JNUH+D/gHtE9sHe6ZEnxwZL7g==';

describe('zkLogin signature', () => {
	test('is parsed successfully', () => {
		expect(parseZkLoginSignature(fromB64(aSignature).slice(1))).toMatchObject({
			inputs: aSignatureInputs,
			maxEpoch: '174',
			userSignature: fromB64(anEphemeralSignature),
		});
	});
	test('is serialized successfully', () => {
		expect(
			getZkLoginSignature({
				inputs: aSignatureInputs,
				maxEpoch: '174',
				userSignature: fromB64(anEphemeralSignature),
			}),
		).toBe(aSignature);
	});
	it(
		'verify personal message with zklogin',
		async () => {
			// this test assumes the localnet epoch is smaller than 3. it will fail if localnet has ran for too long and passed epoch 3.
			// test case generated from `sui keytool zk-login-insecure-sign-personal-message --data "hello" --max-epoch 3`
			let bytes = 'aGVsbG8='; // the base64 encoding of "hello"
			let testSignature =
				'BQNMODIxMjAxNjM1OTAxNDk1MDg0Mjg0MTUyNTc3NTE1NjQ4NzI2MjEzOTk0OTQ3ODkwNjkwMTc5ODI5NjEwMTkyNTI3MTY5MTU2NTE4ME0xNjE1NTM3MDU2ODcyNzI3OTgxODg5MzYwMzc1NDQwNzYxNzM3NzcxNTgwOTA2NTUwMTYyODczNjg4MjcyNTU3NTIzMjgzNDkyMzcyNgExAwJNMTE2MTk3MTE1NjYyNDg1NTk1NzUyNzE0MDEzMTI1NzE2OTg5NTkxMDA2MjM3NjM4NzY0NjM1OTEzNDY1NTY2OTM1NzI5NzQxOTE1MDlMNTIyOTU4MjE1NDQ1MzkxMDM4MzYwMzYzNjEzNTY0NDU5MTc1NTk3NDI1OTQyMDg4NjUxMzYwMTQ2Mjc0OTk5Mzg2NTA2MTkyODU2NAJNMTA5MDE5ODc3NzAyNTI5NzkzOTM2NDM4NDU1MjM1MzQ2NTQ4MjY3MTkyODUzMzA2NzQwNTk3Nzg0Nzg3NzYwODQ2Mjc4NjQyNzg0NzJMMjg0MjQxNTQ4Mjg0NjQyNzg5NzAwNjM2OTIyMDk0NDUyNjUzMzgwNzc3ODIxMzQyOTA5NTQ2NDc1ODc0MTE5NTkxMTU5NjE0MzY4MwIBMQEwA00xODg1NDIyNzM3ODk4ODA1MDA3NTM2NTExNjAxNzEzNTYxOTQ1MzA3NDcyOTcwNzE5OTgyOTA5OTA2OTUwMDk3NzgzNTcwNjY1OTU4OEw0ODU5NzY1MTQ5OTgxMDYyMTIxOTc0Njg3NTYxNzc4NDA2ODU0NzAxNjEyNzk4NTU2NTE3NzQ4OTU1NDA5NzgxMjkxNTA1MDYzNjQxATEod2lhWE56SWpvaWFIUjBjSE02THk5dllYVjBhQzV6ZFdrdWFXOGlMQwI+ZXlKcmFXUWlPaUp6ZFdrdGEyVjVMV2xrSWl3aWRIbHdJam9pU2xkVUlpd2lZV3huSWpvaVVsTXlOVFlpZlFNMjA0MzUzNjY2MDAwMzYzNzU3NDU5MjU5NjM0NTY4NjEzMDc5MjUyMDk0NzAyMTkzMzQwMTg1NjQxNTgxNDg1NDQwMzYxOTYyODQ2NDIDAAAAAAAAAGEA+XrHUDMkMaPswTIFsqIgx3yX6j7IvU1T/1yzw4kjKwjgLL0ZtPQZjc2djX7Q9pFoBdObkSZ6JZ4epiOf05q4BrnG7hYw7z5xEUSmSNsGu7IoT3J0z77lP/zuUDzBpJIA';
			let parsed = parseSerializedZkLoginSignature(testSignature);
			let pk = new ZkLoginPublicIdentifier(parsed.publicKey, {
				client: new SuiGraphQLClient({
					url: 'http://127.0.0.1:9125',
				}),
			});

			// verifies ok bc max_epoch 3 is within upper bound.
			let res = await pk.verifyPersonalMessage(fromB64(bytes), parsed.signature);
			expect(res).toBe(true);

			// test case generated from `sui keytool zk-login-insecure-sign-personal-message --data "hello" --max-epoch 100`
			// fails to verify bc max_epoch too large.
			let testSignature2 =
				'BQNNMTU3MTEzMjIxMjQyNzE4OTQyODkwNzkwMzcyMTAyNzkxNDU1MzAxMTc4NzgxMDIyOTYzNzQ2Njk5MTE0NzU5MDY3ODYyNDYyNzQ2MTBNMTY2MDg4MjI5MjU0NDI1OTQyMjkxMjY4MDIzMzUyNDE3NDU3NTcwMDc0NjUxMjQ0MTI1OTczMTE2MDM5NzYwMTk2ODk0MzE5ODY5MDYBMQMCTTEzNDQ1MjU4Mzc0Mjk4MTE1MjAzMjEwODM4NzU1Nzk0MDExMTg1NDU0OTgzODgxMTg5OTYwNTQzODc5NjMzMDE5OTQxODEyMDk2MjYzTDE3Njk4NDE1NzUzNDg4NDgzOTEzMjMxMTA3NDMyNDkzMTkyOTAxMTEwNjY0NzE2OTkxMzQwNzY0NjExMzg2OTk5NDg1NDAyODA3MzgCTTE0ODU5NDk0ODMxNjI4MzQyMDEzMTM0NDA4NzAxMTIwNDUxMDI4MDkyMTg4MDAxMTMwOTkxNjkxMjAyNzMyMzA2NzcxODI4NTYxNzU0TTIwMzM1NDE4NjE3NzgyMzU5MTQ2NTg0NzcwNzM0MDcyMzI3NzYwMjAyNDYwMDE2NDY0NjAwNjQzMDA2Nzg5NzAyODg0MzQ1NTkzNjg5AgExATADTTE4Nzk4Mjk5MDAzOTAyMDI3MDcxNTg1ODY5MjY3MzYyOTc5ODUwOTExNzA3Nzk2MzU0NDQyMTY2NzEzOTcyNjQ2NzE2OTQ1OTgyMjM4TTEyMDExNjg0MjA0MDI0NTMxNzY2ODUxMTU0OTAyMzI5Njk4MDIwODQ3NTQ1NDU5NDk2MjA2MDI2NDg5MTE5MzUzODI4NTI2NTE5MzAwATEod2lhWE56SWpvaWFIUjBjSE02THk5dllYVjBhQzV6ZFdrdWFXOGlMQwI+ZXlKcmFXUWlPaUp6ZFdrdGEyVjVMV2xrSWl3aWRIbHdJam9pU2xkVUlpd2lZV3huSWpvaVVsTXlOVFlpZlFNMjA0MzUzNjY2MDAwMzYzNzU3NDU5MjU5NjM0NTY4NjEzMDc5MjUyMDk0NzAyMTkzMzQwMTg1NjQxNTgxNDg1NDQwMzYxOTYyODQ2NDJkAAAAAAAAAGEA+XrHUDMkMaPswTIFsqIgx3yX6j7IvU1T/1yzw4kjKwjgLL0ZtPQZjc2djX7Q9pFoBdObkSZ6JZ4epiOf05q4BrnG7hYw7z5xEUSmSNsGu7IoT3J0z77lP/zuUDzBpJIA';
			let parsed2 = parseSerializedZkLoginSignature(testSignature2);
			let res1 = await pk.verifyPersonalMessage(fromB64(bytes), parsed2.signature);
			expect(res1).toBe(false);
		},
		{
			// this test may be flaky, as it needs to wait for a bit for JWK to be available, but also cannot wait too long that makes max epoch expire.
			retry: 10,
		},
	);

	it(
		'verify transaction data with zklogin',
		async () => {
			// this test assumes the localnet epoch is smaller than 3. it will fail if localnet has ran for too long and passed epoch 3.
			let bytes =
				'AAACACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEA4gQmToIuoooNSxc7HlzVAkL7Zm+ze/J5kBPCtqBalF8AAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQEBAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWPawLycA82GN2Ce7/u2hIRtjzjGtuSiOKCNn3TSpNnpAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAA';
			let testSignature =
				'BQNNMTk1NTAyNTI3OTY4ODQzODg0OTc0Mjg0NTg1NjM4OTc5Mzk3MjYyMDIzOTkyMDIxNjgxNjkwMjU5MzYwOTg3NjE4NjA0NTUyNTc2NzdNMTIzMTg1NDU2ODE4MTU4MDUzNzUxNTA4NDM2MzgxOTcxMjc4MzUzMDI4MjQ4MDMxNjkyNDM3MzI0OTU5NDkwNjE0MDY0NjU0NTk5NjgBMQMCTTEyNzkxNzY0NTc2NzA3MTQ5NjkwNTQ5MTY4MzMwMTQ0NTI0MDE4MDExODg0NzAyMzQ3OTEwNTUzMTE1MDA0MjEyNzk5MjE2MjQ0NTI5TDk2ODgyNTQ1MzI1NzMyMjcxNDQ2NDA2MjQ5NzQ4MjE1OTc0MjA3NDc0Nzc5MjM3Nzc2ODQ5OTQ2ODkxOTgzNDI1NjA5ODk5ODM0MTcCTTExMDE5NDkwMDk4MTUxODAyMDQ4MDY5NDk1MDg3NTMyOTQ5MDI1MzQzMjMxNDcxNzg0MTc3OTIwNTc4MzA5MzIzMjAwNjIxODc0NTk1TDQ2NzUxMTQyNDUzMTg2NjY2ODY0NzE4NTc4NTAxNTEwODkwNDQwODkwMjc5NjY3MjA2NzQwMDY0MTQxNDk1MzQ5MzY1Nzg2MzE4MTcCATEBMANMMjY2NTQwNTYyODU4NzA0ODIxMzM2NDc4NjI4Mzc5Mjg0MjUwNTQyNDMxNTUyOTYyNjIyMDI4OTUxNjQ5MDYyMjIyNjIxMDYzMTIxNE0xOTk1MTE4MjM4MjcwNzQ0MzQ3NjE4MzI3Nzk1ODcxNzk5MTE2NjM5OTc3NjgzMzUxNjcxNzAzMTAzODQ4NjEzNzg1MDYyMjY5NTExMgExKHdpYVhOeklqb2lhSFIwY0hNNkx5OXZZWFYwYUM1emRXa3VhVzhpTEMCPmV5SnJhV1FpT2lKemRXa3RhMlY1TFdsa0lpd2lkSGx3SWpvaVNsZFVJaXdpWVd4bklqb2lVbE15TlRZaWZRTTIwNDM1MzY2NjAwMDM2Mzc1NzQ1OTI1OTYzNDU2ODYxMzA3OTI1MjA5NDcwMjE5MzM0MDE4NTY0MTU4MTQ4NTQ0MDM2MTk2Mjg0NjQyBQAAAAAAAABhAPgqhzb3iUKHcfpNsCWl73hg1kOg0FdponMDGxH2zaKntOxDYQ/LRfCOuhJKigDOKTeINaXJXKvixAf1e9SBPQ65xu4WMO8+cRFEpkjbBruyKE9ydM++5T/87lA8waSSAA==';
			let parsed = parseSerializedZkLoginSignature(testSignature);
			let pk = new ZkLoginPublicIdentifier(parsed.publicKey, {
				client: new SuiGraphQLClient({
					url: 'http://127.0.0.1:9125',
				}),
			});

			// verifies ok bc max_epoch 5 is within upper bound.
			let res = await pk.verifyTransactionBlock(fromB64(bytes), parsed.signature);
			expect(res).toBe(true);

			// fails to verify bc max_epoch 100 is too large.
			let bytes2 =
				'AAACACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAKAStDxiBGFiNprtqYoLyDO42/gWS0DzBKdMDdBrdOxUAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQEBAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcmjidA7yxgmjYygQmRWV5efCwVpVvraBoiaMzn6f5irAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAA';
			let testSignature2 =
				'BQNNMTk0NjEwNDAyNzIyMzgzNDk5NzM5NzI2MjczNzIwODA3Mjg4MDE0MjQ3ODMxMzg5NDcwNjYyOTk2NTUyMzI0OTU1MjIwNjAzOTI4MTdNMTYwNTAyMjU4MTQ5ODM3NzIzOTgyMDU3MjgwNDIzNzY5NjU5MzcwMTk0ODAzMDkyOTM3NDUwODc3ODkyODIwODc5MDcyNzQ5MTMwODYBMQMCTDIwNzMyMDU1MTY4OTkwOTg1OTQ4MzEyMzQ0MDE1Mjk3ODMxNzI5MTEyMzk3OTIwMTIyNDI3NTExMTg5MTU4ODg5MTA4Mjg1NjMyMzRNMTM4NDU3OTM2MzYyNjI4NzQ2NzEwNTYwMjM4NjIzODg4OTY0Njk1OTIxMjIxMTQwNzIwNzQyNzE2NzY4MjEzMzE1NjU3OTQzNzE0NTYCTTE5MTE5NTk0NTE0NjgzMTUxODQ2NjUxMTI3OTU5MjAxMjExNTYzMTUwMDYyNjY1NDgzMzUxNTkyOTY5MzY2Mzc0ODQxNTA5OTE0NDY5TTE4MjEwNjM1NDcyMDI3MDU1OTE4OTAwOTE1Mjc1ODk3MDcxMzQxMTAwNDY5NTAwOTM3NDk3NjA5NTA1OTM1NTYzMTI2MjA0Nzg4MDYwAgExATADTTE0Mjc3ODY0MjkyNTExODg3NjE4MzA4MzEwMTUyMTY1NTU2NjcwNDUxNjQzNTE4OTYwMDY5NTg2NjU4MjU4NzYzMTc1NDMxODgxODE4TDMwNDkyMjM2MDk4MDIyNzI0NjIzOTUxOTE0NDYxNDg4MTYwODMwMTM2MTMwNTY4Mzg0NzY0MjE2MDQ0MjcxOTE3NDU3ODM5MjcwMzIBMSh3aWFYTnpJam9pYUhSMGNITTZMeTl2WVhWMGFDNXpkV2t1YVc4aUxDAj5leUpyYVdRaU9pSnpkV2t0YTJWNUxXbGtJaXdpZEhsd0lqb2lTbGRVSWl3aVlXeG5Jam9pVWxNeU5UWWlmUU0yMDQzNTM2NjYwMDAzNjM3NTc0NTkyNTk2MzQ1Njg2MTMwNzkyNTIwOTQ3MDIxOTMzNDAxODU2NDE1ODE0ODU0NDAzNjE5NjI4NDY0MmQAAAAAAAAAYQDteHcNR9NupDgGeYs77VLtIKsi0Rl9kxGUMrRWYM4ord7aaGkr+fToEq1F5h045wdMk4/XoJFZIv4xFDUZmuIFucbuFjDvPnERRKZI2wa7sihPcnTPvuU//O5QPMGkkgA=';
			let parsed2 = parseSerializedZkLoginSignature(testSignature2);
			let res1 = await pk.verifyPersonalMessage(fromB64(bytes2), parsed2.signature);
			expect(res1).toBe(false);
		},
		{
			// this test may be flaky, as it needs to wait for a bit for JWK to be available, but also cannot wait too long that makes max epoch expire.
			retry: 10,
		},
	);
});
